name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  # 🔍 Code Quality Checks
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Run ESLint
      run: npm run lint
      
    - name: 🎨 Check Prettier formatting
      run: npm run format:check
      
    - name: 📊 TypeScript type checking
      run: npm run type-check
      
    - name: 📈 Upload code quality report
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 🧪 Testing Suite
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: real_estate_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🗄️ Setup test database
      run: |
        npm run db:migrate:test
        npm run db:seed:test
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/real_estate_test
        
    - name: 🧪 Run unit tests
      run: npm run test:unit
      
    - name: 🔗 Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/real_estate_test
        
    - name: 📊 Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        
    - name: 📈 Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: test-results.xml
        reporter: jest-junit

  # 🏗️ Build Application  
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: 📦 Build backend
      working-directory: ./backend
      run: npm run build:server
      
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          dist/
          build/
        retention-days: 7

  # 🚨 Security Scanning
  security:
    name: 🚨 Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run npm audit
      run: npm audit --audit-level moderate
      
    - name: 🛡️ Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium
        
    - name: 🔒 Run CodeQL analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: 🔍 Perform CodeQL analysis
      uses: github/codeql-action/analyze@v2

  # 💡 Performance & Accessibility
  lighthouse:
    name: 💡 Lighthouse CI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        
    - name: 🚀 Start preview server
      run: |
        npm install -g serve
        serve -s dist -p 3000 &
        sleep 5
        
    - name: 💡 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security, test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://real-estate-staging-9sh8.onrender.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        
    - name: 🚀 Deploy to Render Staging
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: 🧪 Run E2E tests on staging
      run: |
        npm install -g playwright
        npm run test:e2e:staging
      env:
        BASE_URL: https://real-estate-staging-9sh8.onrender.com

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, test, lighthouse]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://real-estate-frontend-9sh8.onrender.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        
    - name: 🚀 Deploy to Render Production
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: 🔔 Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🎉 Production deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: 📈 Update deployment status
      run: |
        echo "Deployment completed at $(date)" >> deployment-log.txt
